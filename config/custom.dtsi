#define COMBO_TIMEOUT_MS 60

#define THUMB_HOLDING_TYPE "balanced"
//
// THUMB_HOLDING_TIME defines how long you need to hold (milliseconds)
// a thumb key to activate a layer.  Shorter holds are treated as taps.
//
#define THUMB_HOLDING_TIME 170
//
// THUMB_REPEAT_DECAY defines how much time you have left (milliseconds)
// after tapping a key to hold it again in order to make it auto-repeat.
//
#define THUMB_REPEAT_DECAY 240 // "tap then hold" for key auto-repeat


// |------------------------|------------------------|
// | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
// |                        |                        |
// |     0  1  2  3  4      |       5  6  7  8  9    |
// |    10 11 12 13 14      |      15 16 17 18 19    |
// | 20 21 22 23 24 25      |      26 27 28 29 30 31 |
// |          32 33 34      |      35 36 37          |
// |------------------------|------------------------|
//
#define LEFT_HAND_KEYS      \
         0  1  2  3  4      \
        10 11 12 13 14      \
     20 21 22 23 24 25  

#define RIGHT_HAND_KEYS     \
                                    5  6  7  8  9    \
                                   15 16 17 18 19    \
                                   26 27 28 29 30 31 
#define LEFT_THUMB_KEYS  32 33 34
#define RIGHT_THUMB_KEYS 35 36 37

/ {
    combos {
         compatible = "zmk,combos";
         // R & F
         cmdshift_left {
             bindings = <&kp LG ( LSHIFT )>;
             key-positions = <3 13>;
             timeout-ms = <COMBO_TIMEOUT_MS>;
             layers = <0 1 4 5 6>;
             slow-release;
         };
         // U & J
         cmdshift_right {
             bindings = <&kp RG ( RSHIFT )>;
             key-positions = <6 16>;
             timeout-ms = <COMBO_TIMEOUT_MS>;
             layers = <0 1 4 5 6>;
             slow-release;
         };
         // R & F
         ctrlshift_left {
             bindings = <&kp LC ( LSHIFT )>;
             key-positions = <3 13>;
             timeout-ms = <COMBO_TIMEOUT_MS>;
             layers = <3>;
             slow-release;
         };
         // U & J
         ctrlshift_right {
             bindings = <&kp RC ( RSHIFT )>;
             key-positions = <6 16>;
             timeout-ms = <COMBO_TIMEOUT_MS>;
             layers = <3>;
             slow-release;
         };
         // V & B
         combo_quit_macos {
             bindings = <&kp LG ( Q )>;
             key-positions = <24 25>;
             layers = <0 1 4 5 6 7 8 9>;
             timeout-ms = <COMBO_TIMEOUT_MS>;
             slow-release;
         };
         // G & B
         combo_close_macos {
             bindings = <&kp LG ( W )>;
             key-positions = <14 25>;
             layers = <0 1 4 5 6 7 8 9>;
             timeout-ms = <COMBO_TIMEOUT_MS>;
             slow-release;
         };
         // G & B
         combo_close_windows {
             bindings = <&kp LC ( W )>;
             key-positions = <14 25>;
             layers = <3 1 4 5 6 7 8 9>;
             timeout-ms = <COMBO_TIMEOUT_MS>;
             slow-release;
         };
         // T & G
         combo_selectall_macos {
             bindings = <&kp LG ( A )>;
             key-positions = <4 14>;
             layers = <0 1 4 5 6 7 8 9>;
             timeout-ms = <COMBO_TIMEOUT_MS>;
             slow-release;
         };
         // T & G
         combo_selectall_windows {
             bindings = <&kp LC ( A )>;
             key-positions = <4 14>;
             layers = <3 1 4 5 6 7 8 9>;
             timeout-ms = <COMBO_TIMEOUT_MS>;
             slow-release;
         };
         // Enter
         combo_enter {
             bindings = <&kp ENTER>;
             key-positions = <23 24>;
             timeout-ms = <COMBO_TIMEOUT_MS>;
             layers = <0 1 3 4 5 6 7 8 9>;
             slow-release;
         };
         // Space
         combo_space {
             bindings = <&kp SPACE>;
             key-positions = <3 4>;
             timeout-ms = <COMBO_TIMEOUT_MS>;
             layers = <0 1 3 4 5 6 7 8 9>;
             slow-release;
         };
         // LOW layer
         combo_layer_low {
             bindings = <&sl LOW>;
             key-positions = <33 34>;
             timeout-ms = <COMBO_TIMEOUT_MS>;
             layers = <0 1 3 4 5 6 7 8 9>;
             slow-release;
         };
  };

    behaviors {
        appswmac: app_switch_mac {
            compatible = "zmk,behavior-tri-state";
            label = "TRI-STATE-MAC";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
            ignored-key-positions = <14 15>; // Ignort SHIFT key position so we can go back in the window list
        };
        appswwin: app_switch_win {
            compatible = "zmk,behavior-tri-state";
            label = "TRI-STATE-WIN";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            ignored-key-positions = <14 15>; // Ignort SHIFT key position so we can go back in the window list
        };
        // capsword: behavior_caps_word {
        //     compatible = "zmk,behavior-caps-word";
        //     label = "CAPSWORD";
        //     #binding-cells = <0>;
        //     mods = <MOD_LSFT>;
        //     continue-list = <UNDERSCORE BACKSPACE DELETE>;
        //     ignore-alphas;
        //     ignore-numbers;
        //     ignore-modifiers;
        // };
        // /omit-if-no-ref/ numword: behavior_numword {
        //     compatible = "zmk,behavior-caps-word";
        //     label = "NUMWORD";
        //     #binding-cells = <0>;
        //     layers = <NUM>;                           // insert location of numbers layer here
        //     continue-list = <COMMA>;  // adjust as desired
        //     // continue-list = <BACKSPACE DELETE DOT COMMA COLON MINUS PLUS STAR>;  // adjust as desired
        //     ignore-numbers;                           // numbers don't deactivate the layer
        //     /delete-property/ mods;
        // };
        hl: hrmod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "ADVANCED_HRM_L";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <240>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <70>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS RIGHT_THUMB_KEYS>;
            hold-trigger-on-release;
        };
        hr: hrmod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "ADVANCED_HRM_R";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <240>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LEFT_HAND_KEYS LEFT_THUMB_KEYS>;
            hold-trigger-on-release;
        };
        ltr: my_layer_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_RIGHT";
            flavor = "balanced";
            hold-trigger-key-positions = <25 36 37 38 47 48 49 50>; // Arrows and cut/copy/paste on LEFT side
            tapping-term-ms = <170>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };
        ltl: my_layer_tap_left {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_LEFT";
            flavor = "balanced";
            hold-trigger-key-positions = <29 30 31 41 42 43 59 60 61 74 47 48 49 50>; // Numbers and cut/copy/paste on RIGHT side
            tapping-term-ms = <170>;
            quick-tap-ms = <170>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };
        tmb: miryoku_thumb_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "MIRYOKU_LAYER_TAP_WITH_REPEAT";
            flavor = THUMB_HOLDING_TYPE;
            tapping-term-ms = <THUMB_HOLDING_TIME>;
            quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
            //global-quick-tap; // no typing streak
            retro-tap; // allow slow (hold-like) taps
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };
        tmb_hold_preferred: thumb_layer_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "MIRYOKU_LAYER_TAP_WITH_REPEAT";
            flavor = "hold-preferred";
            tapping-term-ms = <THUMB_HOLDING_TIME>;
            quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
            //global-quick-tap; // no typing streak
            retro-tap; // allow slow (hold-like) taps
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };
        mmt: my_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MY_MOD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
        };
        z_shrt_gr: z_shortcut_cmd_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "Z_CMD_GRAVE";
            #binding-cells = <0>;
            bindings = <&ltl COMMON_SHORTCUTS Z>, <&kp GRAVE>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LGUI|MOD_RGUI)>;
        };
        qtmacnewtab: mac_new_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "MAC_NEW_TAB";
            #binding-cells = <0>;
            bindings = <&kp DQT>, <&kp LG(T)>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };
        qtwinnewtab: win_new_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "WIN_NEW_TAB";
            #binding-cells = <0>;
            bindings = <&kp DQT>, <&kp LC(T)>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };
        tab_bksp: game_tab_bksp {
            compatible = "zmk,behavior-mod-morph";
            label = "GAME_TAB_BACKSPACE";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp BACKSPACE>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
        shft_bspc: shift_backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_BACKSPACE";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        tmb_mrph_del: thumb_morph_delete {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_MORPH_DELETE";
            flavor = THUMB_HOLDING_TYPE;
            tapping-term-ms = <THUMB_HOLDING_TIME>;
            quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
            //global-quick-tap; // no typing streak
            retro-tap; // allow slow (hold-like) taps
            #binding-cells = <2>;
            bindings = <&mo>, <&shft_bspc>;
        };
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };
        /*
          - tap: sticky shift
          - double-tap: caps-word (shift + tap mod-morph)
          - hold: shift

          From: https://github.com/urob/zmk-config/
        */
        /omit-if-no-ref/ smart_shift: smart_shift {
            label = "SMART_SHIFT";
            compatible = "zmk,behavior-mod-morph";
            bindings = <&skq RSHFT>, <&caps_word>;
            mods = <(MOD_RSFT)>;
            #binding-cells = <0>;
        };
        /*
          - tap: sticky gui
          - double-tap: FUN layer (guie + tap mod-morph)
          - hold: gui

          From: https://github.com/urob/zmk-config/
        */
        /omit-if-no-ref/ smart_gui: smart_gui_layer_change {
            label = "SMART_GUI_WITH_LAYER_CHANGE";
            compatible = "zmk,behavior-mod-morph";
            bindings = <&skq LGUI>, <&to FUN>;
            mods = <(MOD_LGUI)>;
            keep-mods = <((MOD_LGUI))>;
        };
    };

    macros {
        tonumword: activate_numword {
            label = "to_num_word";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <0>;
            bindings = <&tog NUM &num_word>;
        };
        visave: vim_save_normal {
            label = "vim_save";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <0>;
            bindings = <&kp LC(LBKT) &kp SEMICOLON &kp W &kp ENTER>;
        };
        nextdiag: next_diag {
            label = "vim_nextdiag";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <0>;
            bindings = <&kp LC(LBKT) &kp RBKT &kp G>;
        };
        prevdiag: prev_diag {
            label = "vim_prevdiag";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <0>;
            bindings = <&kp LC(LBKT) &kp LBKT &kp G>;
        };
        nexthunk: next_hunk {
            label = "vim_nexthunk";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <0>;
            bindings = <&kp LC(LBKT) &kp RBKT &kp C>;
        };
        prevhunk: prev_hunk {
            label = "vim_prevhunk";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <0>;
            bindings = <&kp LC(LBKT) &kp LBKT &kp C>;
        };
        preview_hunk: preview_hunk {
            label = "vim_previewhunk";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <0>;
            bindings = <&kp LC(LBKT) &kp COMMA &kp H &kp P>;
        };
        viquit: vim_write_quit {
            label = "vim_w_q";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <0>;
            bindings = <&kp LC(LBKT) &kp SEMICOLON &kp W &kp Q &kp A &kp ENTER>;
        };
        texit: term_exit {
            label = "T_Exit";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <0>;
            bindings = <&kp E &kp X &kp I &kp T &kp ENTER>;
        };
        vinsertsave: vim_insert_save {
            label = "vim_insert_save";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <0>;
            bindings = <&kp LC(O) &kp SEMICOLON &kp W &kp ENTER>;
        };
        nvimt: nvim_terminal {
            label = "NVIM_Term";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <0>;
            bindings = <&kp LC(LBKT) &kp SEMICOLON &kp V &kp S &kp ENTER &kp SEMICOLON &kp T &kp E &kp R &kp M &kp ENTER &kp I>;
        };
        nvimqt: nvim_quit {
            label = "NVIM_QUIT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <0>;
            bindings = <&kp LC(LBKT) &kp SEMICOLON &kp Q &kp A &kp ENTER>;
        };
        surwrd: surround_wrd_dqoute {
            label = "SUR_WRD_QOUTE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <0>;
            bindings = <&kp V &kp I &kp LS(W) &kp LS(S) &kp DOUBLE_QUOTES>;
        };
        gitstat: git_status {
            label = "GIT_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <0>;
            bindings = <&kp G &kp S &kp T &kp ENTER>;
        };
        nvim: run_nvim {
            label = "NVIM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <0>;
            bindings = <&kp N &kp V &kp I &kp M &kp ENTER>;
        };
        zfs: zfs_space {
                label = "ZFS";
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                wait-ms = <30>;
                tap-ms = <0>;
                bindings = <&kp Z &kp F &kp S &kp SPACE>;
        };
        gif: gif {
            label = "giphy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp N2>
                , <&macro_release &kp LSHFT>
                , <&macro_tap &kp G &kp I &kp F>
                ;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
        bt_clrall: bt_clr_all {
            label = "BT_CLEAR_ALL";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms  = <40>;
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0>, <&bt BT_CLR>,
                       <&bt BT_SEL 1>, <&bt BT_CLR>,
                       <&bt BT_SEL 2>, <&bt BT_CLR>,
                       <&bt BT_SEL 3>, <&bt BT_CLR>;
        };
    };

    conditional_layers {
        // Use Windows shortcuts for Cut/Copy/Paste & BACK/FORWARD key in the
        // Digits layer if we are on the Windows layer.
        compatible = "zmk,conditional-layers";
        tri_layer1 {
            if-layers = <WIN NUM>;
            then-layer = <THENWIN_NUM>;
        };
        tri_layer2 {
            if-layers = <WIN CUR>;
            then-layer = <THENWIN_CUR>;
        };
        tri_layer3 {
            if-layers = <WIN MCR>;
            then-layer = <THENWIN_MCR>;
        };
        tri_layer4 {
            if-layers = <WIN COMMON_SHORTCUTS>;
            then-layer = <THENWIN_SHORTCUTS>;
        };
    };

};
